#log4j.rootCategory=trace|debug|error|warning|info|all, STDOUT, FILE
log4j.rootCategory=warning, STDOUT, FILE

#
# File config
#
log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.File=${user.home}/.Log4J-cchlib-apps-duplicatefilesmanager.log
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
# Pattern to output the caller's file name and line number.
#log4j.appender.FILE.layout.ConversionPattern=[%d{HH:mm:ss}] : %m%n
#log4j.appender.FILE.layout.ConversionPattern=[%d{HH:mm:ss}] %5p : %m%n
log4j.appender.FILE.layout.ConversionPattern=[%d{yyyyMMdd HH:mm:ss}] %-5p %c : %m%n

#
# Stdout config
#
log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender
log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout
# Pattern to output the caller's file name and line number.
#
log4j.appender.STDOUT.layout.ConversionPattern=[%d{HH:mm:ss}] %-5p %c : %m%n

# Pattern to specify level for packages.
# log4j.logger.path.to.package=debug

log4j.logger.com.googlecode.cchlib.apps.duplicatefiles.dnd=info
#log4j.logger.com.googlecode.cchlib.apps.duplicatefiles.gui.panels.confirm=trace

log4j.logger.com.googlecode.cchlib.apps.emptydirectories=warning
log4j.logger.com.googlecode.cchlib.apps.emptydirectories.gui=debug
#log4j.logger.com.googlecode.cchlib.apps.emptydirectories.lookup=debug
log4j.logger.com.googlecode.cchlib.apps.emptydirectories.lookup=trace

log4j.logger.com.googlecode.cchlib.apps.emptyfiles=warning
#log4j.logger.com.googlecode.cchlib.apps.emptyfiles.panel.remove=trace

com.googlecode.cchlib.i18n=warning
com.googlecode.cchlib.i18n.core=debug

#log4j.logger.com.googlecode.cchlib.swing.dnd=error

log4j.logger.com.googlecode.cchlib.util=error
#log4j.logger.com.googlecode.cchlib.swing.filechooser=trace
#log4j.logger.com.googlecode.cchlib.apps.duplicatefiles.gui.panels.search=trace

# display directories removed (and results)
com.googlecode.cchlib.apps.emptydirectories.gui=debug

#       PatternLayout documentation
#       *****************************************************************
#
#       PatternLayout lets you specify the output format according to conversion patterns
#       similar to the C language printf function.
#       For example, PatternLayout with the conversion pattern %r [%t] %-5p %c - %m%n
#       will output something like:
#                       176 [main] INFO  org.foo.Bar - Located nearest gas station.
#
#           - The first field is the number of milliseconds elapsed since the start of the program.
#           - The second field is the thread making the log request.
#           - The third field is the priority of the log statement.
#           - The fourth field is the name of the category associated with the log request.
#           - The text after the '-' is the message of the statement.
#
#       You can insert any literal text within the conversion pattern.
#
#       *****************************************************************
#       Conversion characters are:
#
#    * %m: Outputs your message.
#    * %p: Outputs the priority of the logging event.
#    * %r: Outputs the number of milliseconds elapsed since the start of the application until
#               the creation of the logging event.
#    * %c: Outputs the category of the logging event.
#               Example: For the category name "a.b.c",the pattern %c{2} will output "b.c".
#               {2} means "output last two components of the dot-separated category name".
#               If no {n} is there, full Category name is output by default.
#    * %t: Outputs the name of the thread that generated the logging event.
#    * %x: Outputs the nested diagnostic context (NDC) associated with the thread
#               that generated the logging event.
#               Useful when multiple clients are handled by separate threads such as in Java servlets.
#    * %n: Outputs the platform-dependent newline character(s). Preferable to specifying "\n" or "\r\n" etc.
#    * %%: Outputs a single percent sign.
#
#    WARNING: The patterns below will slow down the execution of your program somewhat.
#                        Avoid unless execution speed is not an issue.
#
#    * %d: Outputs the date of the logging event. The date conversion specifier may be followed by a date format specifier enclosed between braces. Example: %d{HH:mm:ss,SSS} or %d{dd MMM yyyy HH:mm:ss,SSS}. If no date format specifier is given then ISO8601 format is assumed. The date format specifier admits the same syntax as the time pattern string of Java's SimpleDateFormat which is slow. For faster performance, use %d{ISO8601}, %d{ABSOLUTE}, %d{RELATIVE} (millisecs since program start, fastest) or %d{DATE} which use log4j's ISO8601DateFormat, AbsoluteTimeDateFormat, RelativeTimeDateFormat and DateTimeDateFormat date formatters respectively.
#    * %l: Outputs source code location information. Shortcut for %C.%M(%F:%L).
#    * %C: Outputs the fully-qualified class name of the caller issuing the logging request.
#               Example: For the class name "org.apache.xyz.SomeClass",
#               the pattern %C{1} will output "SomeClass".
#               {1} means "output last one component of the fully-qualified class name".
#               If no {n} is there, full class name is output by default.
#    * %M: Outputs the method name where the logging request was issued.
#    * %F: Outputs the file name where the logging request was issued.
#    * %L: Outputs the line number from where the logging request was issued.
#
#       *****************************************************************
#       Optionally, use format modifiers between the percent sign and the conversion character
#       to change the minimum field width, the maximum field width and text justification within a field.
#
#    * Use the minus sign (-) to left-justify within a field. Default is to right-justify (pad on left).
#    * Use a positive integer to specify the minimum field width. If the data item requires fewer characters,
#               it is padded with space(s) on either the left or the right until the minimum width is reached.
#               If the data item is larger than the minimum field width, the field is expanded to accommodate the data.
#    * Use a period followed by a positive integer to specify the maximum field width.
#               If the data item is longer than the maximum field, then the extra characters are removed
#               from the beginning of the data item and not from the end.
#               For example, it the maximum field width is eight and the data item is ten characters long,
#               then the first two characters of the data item are dropped.
#               This behavior deviates from the printf function in C where truncation is done from the end.
#
#       *****************************************************************
#       Examples:
#    * %20c: Right-justify (by default) the category name within 20 spaces minimum.
#    * %-20c: Left-justify the category name within 20 spaces minimum.
#    * %.30c: If the category name is longer than 30 characters, truncate (from the beginning).
#                       No minimum width and therefore, no padding if shorter than 30 characters.
#    * %20.30c: Right-justify if the category name is shorter than 20 characters.
#                       If category name is longer than 30 characters, then truncate from the beginning.
#    * %-20.30c: Left-justify if the category name is shorter than 20 characters.
#                       If category name is longer than 30 characters, then truncate from the beginning.
#    * %r [%t] %-5p %c %x - %m\n: This is essentially the TTCCLayout.
#    * %-6r [%15.15t] %-5p %30.30c %x - %m\n: Similar to the TTCCLayout except that the relative
#                       time is right padded if less than 6 digits, thread name is right padded
#                       if less than 15 characters and truncated if longer, and the category name is left padded
#                       if shorter than 30 characters and truncated if longer.
#
#       *****************************************************************
#       ConversionPattern samples:
#       * %d %-5p %-17c{2} (%30F:%L) %3x - %m%n
#       * %-4r [%t] %-5p %c %x - %m%n
#       * |%8r|%5p|%d{yyyy/MM/dd|HH\\\:mm}| %m%n
#       * %d{yyyyMMdd HHmmss} (%-14p) \: %m %n
#       * |%-15t|%8r|%5p|%d{yyyy/MM/dd|HH:mm}|%C{1}.%M| %m%n
