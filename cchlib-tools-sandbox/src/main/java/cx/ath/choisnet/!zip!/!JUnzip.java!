/*
** -----------------------------------------------------------------------
** Nom           : cx/ath/choisnet/zip/JUnzip.java
** Description   :
** Encodage      : ANSI
**
**  1.10 2005.05.04 Claude CHOISNET
** -----------------------------------------------------------------------
**
** cx.ath.choisnet.zip.JUnzip
**
*/
package cx.ath.choisnet.zip;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.util.Enumeration;
import java.util.StringTokenizer;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

/**
**
** This class will allow you to perform basic pkzip compatible
** data uncompression. <p>
**
** <p>
** The basic steps are: <br />
**   1. get the zipped input stream <br />
**   2. get the zipped entries <br />
**   3. prepare the uncompressed output stream <br />
**   4. read source zipped data and write to uncompressed stream <br />
**   5. close the source and target stream <br />
**
** <p>
** Command syntax <br />
** <pre>
** Usage: java jkunzip [-v] zipfile <br />
** where option includes: <br />
** -v List zip file contents <br />
** </pre>
**
** <p>
** NOTE:  This version expands entries w/ directory structures.
**
** @author Chad (shod) Darby,  darby@j-nine.com
** @version 3.13, 16 Sep 1999
**
*/
public class JUnzip
{
/** */
protected final File zipFile;

/** */
protected final static int DATA_BLOCK_SIZE = 2048;

/**
**
*/
public JUnzip( String zipFileName ) // ------------------------------------
{
 this( new File( zipFileName ) );
}

/**
**
*/
public JUnzip( final File zipFile ) // ------------------------------------
{
 this.zipFile = zipFile;
}

/**
 *
 *  Lists the contents of the zipped file. <br />
 *
 *  @param zipFile the zipped file.
 *
 */
protected static void listContents( // ------------------------------------
    File zipFile
    )
    throws IOException
{

 ZipFile        zf      = new ZipFile( zipFile );
 Enumeration    entries = zf.entries();
 ZipEntry       theEntry;

 //
 // display the listing header
 //
 System.out.println( "Length\t\tSize\t\tName" );
 System.out.println( "------\t\t----\t\t----" );

 //
 // list the contents of each zipped entry
 //
 while( entries.hasMoreElements() ) {
    theEntry = (ZipEntry) entries.nextElement();

    System.out.print(theEntry.getSize() + "\t\t");
    System.out.print(theEntry.getCompressedSize() + "\t\t");
    System.out.println(theEntry.getName());
    }
}

/**
**
*/
public void listIt() // ---------------------------------------------------
    throws java.io.IOException
{
 listContents( zipFile );
}

/**
**
*/
public void unzipIt() // --------------------------------------------------
    throws java.io.IOException
{
 extractFiles( zipFile );
}

/**
 *
 *  Extracts the files contained in the zipped file. <br />
 *
 *  <p>
 *  The basic steps are: <br />
 *    1. get the zipped input stream <br />
 *    2. get the zipped entries <br />
 *    3. prepare the uncompressed output stream <br />
 *    4. read source zipped data and write to uncompressed stream <br />
 *    5. close the source and target stream <br />
 *
 *  @param zipFile the zipped archive
 *
 */
protected void extractFiles( File zipFile ) // ----------------------------
    throws java.io.IOException
{
 FileOutputStream       fos;
 BufferedOutputStream   targetStream;

 ZipEntry theEntry;
 String entryName;

 //
 //  1. get the zipped input stream
 //
 FileInputStream fis             = new FileInputStream( zipFile );
 ZipInputStream  sourceZipStream = new ZipInputStream( fis );

    //
    //  2. get the zipped entries
    //
    while( (theEntry = sourceZipStream.getNextEntry()) != null ) {
        entryName = theEntry.getName();

        //
        //  3. prepare the uncompressed output stream
        //
        try {
            fos = new FileOutputStream(entryName);
            }
        catch (FileNotFoundException exc) {
            //
            // the directory is not created...so let's build it!
            //
            buildDirectory(entryName);
            fos = new FileOutputStream(entryName);
            }

        targetStream = new BufferedOutputStream(fos, DATA_BLOCK_SIZE);

        System.out.println("\tUnzipping: " + theEntry);

        int byteCount;
        byte data[] = new byte[DATA_BLOCK_SIZE];

        //
        // 4. read source zipped data and write to uncompressed stream
        //
        while( (byteCount = sourceZipStream.read(data, 0, DATA_BLOCK_SIZE)) != -1) {
            targetStream.write(data, 0, byteCount);
            }

        //  5. close the target stream
        targetStream.flush();
        targetStream.close();
        }

    //  close the source stream
    sourceZipStream.close();
}

/**
**  Creates the directory structure
*/
protected void buildDirectory( String entryName ) // ----------------------
    throws IOException
{
 final StringTokenizer  st          = new StringTokenizer( entryName, "/" );
 final int              levels      = st.countTokens() - 1;
 final StringBuffer     directory = new StringBuffer();
 File newDir;

 for( int i=0; i < levels; i++ ) {
    directory.append( st.nextToken() + "/" );
    }

  newDir = new File( directory.toString() );
  newDir.mkdirs();
}

/**
 *
 *  Returns the usage string for this class.
 *
 *  @return Returns the usage string.
 *
 */
protected static String getUsageString() // -------------------------------
{
  String temp = null;

  temp =  "\nJKUNZIP ver 1.13\n\n";
  temp += "Usage: java jkunzip [-v] zipfile\n\n";
  temp += "where option includes:\n";
  temp += "-v\tList zip file contents\n";

  return temp;
}

/**
 *  Parses the command line arguments. <br />
 *
 *  @param args command line args as an array of strings.
 *
 */
protected static JUnzipCommandLineArgs parseCommandLineArgs( // -----------
    final String[] args
    )
{
 final JUnzipCommandLineArgs    cla     = new JUnzipCommandLineArgs();
 final int                      length  = args.length;
 String                         name;

 // check if empty arguments
 if( length == 0 ) {
    System.out.println( getUsageString() );

    return null;
    }

 if( length == 1 ) {
    if( ! args[ 0 ].equals( "-v" ) ) {
        cla.zipFileName = args[ 0 ];

        return cla;
        }
    else {
        System.out.println( getUsageString() );

        return null;
        }
    }
 else {
    cla.zipFileName        = args[1];
    cla.showListingFlag    = true;
    }

 return cla;
}

/**
** The main driver routine!
** <br />
** The constructor is used to create a new jkunzip object based
** on the command line arguments. <br />
**
** <p>
** Command syntax <br />
** <pre>
**   Usage: java jkunzip [-v] zipfile <br />
**     where option includes: <br />
**       -v List zip file contents <br />
** </pre>
**
** @param args a string array of command line arguments.
*/
public static void main( String[] args ) // -------------------------------
    throws java.io.IOException
{
 JUnzipCommandLineArgs  cla         = parseCommandLineArgs( args );
 JUnzip                 instance    = new JUnzip( cla.zipFileName );

 if( cla.showListingFlag ) {
    instance.listIt();
    }
 else {
    instance.unzipIt();
    }
}

} // class

/**
**
*/
class JUnzipCommandLineArgs
{
    String  zipFileName     = null;
    boolean showListingFlag = false;
} // class
