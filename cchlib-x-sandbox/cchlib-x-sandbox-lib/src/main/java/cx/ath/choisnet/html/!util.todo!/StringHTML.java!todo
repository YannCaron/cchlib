/*
** $VER: StringHTML.java
*/
package jrpdk.servlet.htmlGenerator.util;

/**
** Codage d'une chaîne JAVA (String) en HTML.<BR>
** Basé sur la RFC1866 et sur la norme HTML 3.2 FINAL
** <A HREF="http://www.w3.org/TR/REC-html32#latin1">http://www.w3.org/TR/REC-html32#latin1</A>.
**
** <PRE>
**  1.00 2000.09.27 Version initiale, méthodes statiques uniquement.
**  1.01 2000.12.04 Mise en place d'un constructeur, définition des méthodes
**                  statiques comme méthode appliquée à l'objet.
**                  Les méthodes statiques sont maintenant obsolètes:
**  1.02 2000.12.06 La classe accepte une String null dans le constructeur.
** </PRE>
**
** @author Claude CHOISNET
** @version 1.02 06/12/2000
**
** @see HTML_Escape
*/
public class StringHTML
{
/** Buffer interne */
protected StringBuffer theStringBuffer = null;

/** Buffer interne */
protected Boolean theStringIsNull = null;

/**
** Construction avec une chaîne initiale. Cette chaîne peut éventuellement
** être null, dans ce cas tous les traitements seront ignorés et la
** méthode toString() retournera la valeur null.
**
** @param original une String ou null
**
** @see #toString()
*/
public StringHTML( String original ) // -----------------------------------
{
 if( original == null ) {
    //
    // Construction avec un buffer vide
    //
    theStringIsNull = new Boolean( true );
    theStringBuffer = new StringBuffer();
    }
 else {
    theStringIsNull = new Boolean( false );
    theStringBuffer = new StringBuffer( original );
    }

}

/**
** Retourne le résultat sous forme de String de la chaîne initiale modifiée
** en fonction du ou des traitements demandé.
**
** @return une String ou null
*/
public String toString() // -----------------------------------------------
{
 if( theStringIsNull.booleanValue() ) {
    // La chaîne initiale était null
    return null;
    }
 else {
    return theStringBuffer.toString();
    }
}

/**
** Modifications pour les caractères apostrophes ("<B>&#39;</B>") ces
** derniers étant remplacés par la séquence HTML correspondante : "
** <B>&amp;#39;</B>"
*/
public void fixQuote() // -------------------------------------------------
{
 replace( '\'', "&#39;");
}

/**
** Retourne une chaîne sans caractère apostrophe ("<B>&amp;</B>" ce dernier
** étant remplacé par la séquence HTML correspondante : "<B>&amp;amp;</B>"
*/
public void fixDoubleQuote() // -------------------------------------------
{
 replace( '"', "&quot;");
}

/**
** Retourne une chaîne sans caractère de espace ce dernier étant
** remplacé par la séquence HTML correspondante : "<B>&amp;nbsp;</B>"
**
*/
public void fixSpace() // -------------------------------------------------
{
 replace( ' ', "&nbsp;");
}

/*
*
** Retourne une chaîne sans caractère de tabulation ce dernier étant
** remplacé par la séquence HTML correspondante : "<B>&amp;nbsp;</B>"
*
public void fixTabulation() // --------------------------------------------
{
 replace( '\t', "&nbsp;");
}
*/

/**
**
*/
public void fixAmp() // --------------------------------------------
{
 replace( '&', "&amp;");
}

/**
** Replace dans la chaîne les caractères 'oldChar' par la chaîne 'newStr'
** <P>
** @param oldChar   char à remplacer
** @param newStr   String de replacement
*/
private void replace( // --------------------------------------------------
    char    oldChar,
    String  newStr
    )
{
 String currentString   = theStringBuffer.toString();
 int    currentBegin    = 0;
 int    currentEnd;

 //System.err.println( "[" + theStringBuffer.toString() + "] -> " + oldChar  + " => " + newStr );

 // Vide la chaîne principale...
 theStringBuffer = new StringBuffer();

 while( ( currentEnd = currentString.indexOf( oldChar, currentBegin ) ) != -1 ) {
    // ajout de la sous-chaine
    theStringBuffer.append( currentString.substring( currentBegin, currentEnd ) );
    theStringBuffer.append( newStr );

    //System.err.println( "begin = " + currentBegin + " - end = " + currentEnd );

    currentBegin = currentEnd + 1;
    }

 // ajout le reste
 theStringBuffer.append( currentString.substring( currentBegin ) );

 //System.err.println( "=>[" + theStringBuffer.toString() + "]" );
}

} // class

/** @deprecated NO REMPLACEMENT ! * /
public static StringBuffer replaceChar( // --------------------------------
    String  str,
    char    c,
    String  replace
    )
{
 // On ne traite pas les chaînes null
 if( str == null ) {
    return null;
    }
 StringBuffer buffer = new StringBuffer();

 int begin  = 0;
 int end    = str.indexOf( c );

 while( end != -1 ) {
    // ajout de la sous-chaine
    buffer.append( str.substring( begin, end ) );
    buffer.append( replace );

    // System.err.println( "begin = " + begin + " - end = " + end );

    begin   = end + 1;
    end     = str.indexOf( c, begin );
    }

 // ajout le reste
 buffer.append( str.substring( begin ) );

 // System.err.println( "replaceChar() => [" + buffer + "]" );

 return buffer;
}

/** @deprecated use fixQuote(); * /
public static String fixQuote( String str ) // ----------------------------
{
 StringHTML stringHTML = new StringHTML( str );

 stringHTML.fixQuote();

 return stringHTML.toString();
}

/** @deprecated use fixSpace(); * /
public static String fixSpace( String str ) // ----------------------------
{
 StringHTML stringHTML = new StringHTML( str );

 stringHTML.fixSpace();

 return stringHTML.toString();
}

/*
* @deprecated use fixTabulation();
public static String fixTabulation( String str ) // -----------------------
{
 StringHTML stringHTML = new StringHTML( str );

 stringHTML.fixTabulation();

 return stringHTML.toString();
}
*/
