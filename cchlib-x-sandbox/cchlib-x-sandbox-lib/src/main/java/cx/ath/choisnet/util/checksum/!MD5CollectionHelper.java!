/*
** -----------------------------------------------------------------------
** Nom           : cx/ath/choisnet/util/checksum/MD5CollectionHelper.java
** Description   :
** Encodage      : ANSI
**
**  3.01.008 2006.03.06 Claude CHOISNET - Version initiale
** -----------------------------------------------------------------------
**
** cx.ath.choisnet.util.checksum.MD5CollectionHelper
**
*/
package cx.ath.choisnet.util.checksum;

import java.io.File;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

/**
** <p>
** Outils pour l'implémentation de {@link MD5Collection}
** </p>
**
** @author Claude CHOISNET
** @since   3.01.008
** @version 3.01.008
**
** @deprecated use {@link cx.ath.choisnet.util.duplicate.MD5CollectionHelper} instead
*/
@Deprecated
public class MD5CollectionHelper
{
/**
** Retourne le nombre de fichiers connus
*/
public static int filesCount( final MD5Collection aMD5Collection ) // -----
{
 int count = 0;

 for( Collection<File> c : aMD5Collection.files().values() ) {
    count += c.size();
    }

 return count;
}

/**
** Compares this object with the specified object for order. Returns a
** negative integer, zero, or a positive integer as this object is less
** than, equal to, or greater than the specified object.
*/
public static int compare( MD5Collection o1, MD5Collection o2 ) // --------
{
 //
 // Analyse des dossiers
 //
 final int cmpFolders = MD5CollectionHelper.compareTo( o1.folders(), o2.folders() );

 if( cmpFolders != 0 ) {
    return cmpFolders;
    }

    //
    // Analyse des fichiers
    //
    {
        Iterator<? extends Map.Entry<MD5TreeEntry,? extends Set<File>>> iter0
                = o1.files().entrySet().iterator();

        Iterator<? extends Map.Entry<MD5TreeEntry,? extends Set<File>>> iter1
                = o2.files().entrySet().iterator();

        while( iter0.hasNext() ) {

            if( iter1.hasNext() ) {
                Map.Entry<MD5TreeEntry,? extends Set<File>> obj0 = iter0.next();
                Map.Entry<MD5TreeEntry,? extends Set<File>> obj1 = iter1.next();

                int resKey = obj0.getKey().compareTo( obj1.getKey() );

                if( resKey != 0 ) {
                    return resKey; // Clés différentes
                    }

                int cmpFiles = MD5CollectionHelper.compareTo( obj0.getValue(), obj1.getValue() );

                if( cmpFiles != 0 ) {
                    return cmpFiles; // Valeur différentes
                    }
                }
            else {
                return -1; // Pas le même nombre d'entrées
                }
            }

        if( iter1.hasNext() ) {
            return 1; // Pas le même nombre d'entrées
            }

    }

 //
 // A priori pas de différences
 //
 if( o1.filesCount() != o2.filesCount() ) {
    throw new RuntimeException( "Inconsistence compareTo() : diff. filesCount() " );
    }

 return 0;
}

/**
**
*/
private final static <T extends Comparable<T>> int compareTo( // ----------
    final Iterable<T> iterable0,
    final Iterable<T> iterable1
    )
{
 final Iterator<T>  iter0   = iterable0.iterator();
 final Iterator<T>  iter1   = iterable1.iterator();

 while( iter0.hasNext() ) {

    if( iter1.hasNext() ) {
        int res = iter0.next().compareTo( iter1.next() );

        if( res != 0 ) {
            return res; // Valeur différentes
            }
        }
    else {
        return -1; // Pas le même nombre d'entrées
        }
    }

 if( iter1.hasNext() ) {
    return 1; // Pas le même nombre d'entrées
    }

 return 0;
}

/**
**
*/
public static String toString( MD5Collection o ) // -----------------------
{
 StringBuilder sb = new StringBuilder();

 for( File f : o.folders() ) {
    sb.append( "D:" + f + "\n" );
    }

 for( Map.Entry<MD5TreeEntry,? extends Set<File>> entry : o.files().entrySet() ) {
    sb.append( "F:" + entry.getKey() + "\n" );
    }

 return sb.toString();
}

} // class
