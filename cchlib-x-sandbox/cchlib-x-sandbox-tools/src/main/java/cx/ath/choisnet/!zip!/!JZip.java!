/*
** -----------------------------------------------------------------------
** Nom           : cx/ath/choisnet/zip/JZip.java
** Description   :
** Encodage      : ANSI
**
**  1.10 2005.05.04 Claude CHOISNET
** -----------------------------------------------------------------------
**
** cx.ath.choisnet.zip.JZip
**
*/
package cx.ath.choisnet.zip;

import java.util.zip.*;
import java.io.*;

/**
**
**  This class will allow you to perform basic pkzip compatible
**  data compression. <p>
**
**  The basic steps are: <br />
**    1.  Create the zip output stream  <br />
**    2.  Open source data file  <br />
**    3.  Create the zip entry  <br />
**    4.  Put the entry  <br />
**    5.  Read source and write the data to the zip output stream  <br />
**    6.  Close the zip entry and other open streams  <br />
**
**  <p>
**  Command syntax <br />
**  <pre> Usage: java JZip zipfile [files] </pre> <br />
**  </p>
**
**  <p>
**  NOTE:  This version does not recurse sub-directories.
**  </p>
**
**  @author Claude CHOISNET
**  @version 1.10
**
*/
public class JZip
{

//-------------------------------------------------
// DATA MEMBERS
//
private final String    archiveFileName;
private final String[]  fileNamesArray;

//-------------------------------------------------
//  CONSTRUCTORS
//
/**
**
**  The constructor is used to create a new JZip object based
 *  on the command line arguments. <br />
 *  Usage: <pre>  java jkzip zipfile [files] </pre> </b> <br />
 *
 *  @param archiveFileName
 *  @param fileNamesArray
 *
 */
public JZip( String archiveFileName, String[] fileNamesArray )
{
  this.archiveFileName    = archiveFileName;
  this.fileNamesArray     = fileNamesArray;
}

//-------------------------------------------------
//  METHODS
//
/**
 *  Reads the data source and writes the compressed file. <br />
 *
 *  <p>
 *  The basic steps are: <br />
 *    1.  Create the zip output stream  <br />
 *    2.  Open source data file  <br />
 *    3.  Create the zip entry  <br />
 *    4.  Put the entry  <br />
 *    5.  Read source and write the data to the zip output stream  <br />
 *    6.  Close the zip entry and other open streams  <br />
 */
public void zipIt()
{
 BufferedInputStream sourceStream;
 File                theFile;
 FileInputStream     fis;

 ZipOutputStream     targetStream;
 FileOutputStream    fos;
 ZipEntry            theEntry;

 final int      DATA_BLOCK_SIZE = 2048;
 final byte[]   data            = new byte[ DATA_BLOCK_SIZE ];
 int            byteCount;

 try {
    //
    // 1.  create the ZipOutputStream
    //
    System.out.println( "Creating ZIP: " + archiveFileName );

    fos = new FileOutputStream(archiveFileName);
    targetStream = new ZipOutputStream(fos);
    targetStream.setMethod(ZipOutputStream.DEFLATED);

    // loop thru the array
    for (int i=0; i < fileNamesArray.length; i++)
    {

      theFile = new File(fileNamesArray[i]);

      //  check if file is a directory, if so then skip
      if (theFile.isDirectory())
      {
        // i won't recurse directories so let's skip
        System.out.println("\tSkipping directory: " + theFile);
        continue;
      }

      // 2.  open source file
      //
      fis = new FileInputStream(fileNamesArray[i]);
      sourceStream = new BufferedInputStream(fis);

      // 3.  create the ZipEntry
      //
      theEntry = new ZipEntry(fileNamesArray[i]);
      System.out.print("\tAdding: " + theEntry.getName());

      // 4.  put the entry
      //
      targetStream.putNextEntry(theEntry);

      // 5.  read source data and write target data
      //     to compressed output stream
      //

      while ( (byteCount = sourceStream.read(data, 0, DATA_BLOCK_SIZE)) != -1)
      {
        targetStream.write(data, 0, byteCount);
      }

      targetStream.flush();

      // 6.  close the entry
      //
      System.out.println(", done.");
      targetStream.closeEntry();

      sourceStream.close();

    } // end for loop

    targetStream.close();

  }

  catch (IOException e)
  {
    e.printStackTrace();
  }

}

/**
 *
 *  Returns the usage string for this class.
 *
 *  @return Returns the usage string.
 *
 */
public static String getUsageString()
{
  return "\nJKZIP ver 1.13\n\n"
              + "Usage: java jkzip zipfile [files]\n";
}

/**
**  This class will allow you to perform basic pkzip compatible
**  data compression. <p>
**
**  <p>
**  Command syntax <br />
**  <pre> Usage: java JZip zipfile [files] </pre> <br />
**  </p>
*/
public static void main( String[] args ) // -------------------------------
{
 if( args.length == 0 ) {
    System.out.println( getUsageString() );
    System.exit( 1 );
    }

 final String   archiveFileName = args[ 0 ];
 String[]       fileNamesArray;

  // create the fileNames array
  //
  // if user supplied list of file(s) then args.length
  // will be greater than 1.
  //
  if( args.length > 1 ) {
    fileNamesArray = new String[ args.length - 1 ];

    for (int j=0; j < fileNamesArray.length; j++) {
        fileNamesArray[ j ] = args[ j + 1 ];
        }
    }
  else /* if( args.length == 1 ) */ {
    //
    // if user didn't supply files then zip the entire directory
    //
    File currentDirectory = new File(".");

    fileNamesArray = currentDirectory.list();
    }

  JZip myApp = new JZip( archiveFileName, fileNamesArray );
  myApp.zipIt();
}

} // class

/**
**
*/
class JZipCommandLineArgs
{
    String  zipFileName     = null;
    boolean showListingFlag = false;
} // class
