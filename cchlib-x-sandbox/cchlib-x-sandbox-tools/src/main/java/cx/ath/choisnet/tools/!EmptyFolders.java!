/*
** -----------------------------------------------------------------------
** Nom           : cx/ath/choisnet/tools/EmptyFolders.java
** Description   :
**
** 1.00 2005.08.21 Claude CHOISNET - Version initiale
** -----------------------------------------------------------------------
**
** cx.ath.choisnet.tools.EmptyFolders
**
*/
package cx.ath.choisnet.tools;

import cx.ath.choisnet.io.FileIterator.DirectoriesOnlyFileFilter;
import cx.ath.choisnet.io.FileIterator;
import java.io.File;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Collections;
import java.util.List;

/**
**
** @author Claude CHOISNET
** @version 1.0
** @since 1.00
*/
public class EmptyFolders
    implements
        Iterable<File>,
        java.io.Serializable
{
/** serialVersionUID */
private static final long serialVersionUID = 1L;

/** */
private List<File> listOfEmptyFolder;

/** */
private List<File> listOfRootFolder;

/** */
private transient DirectoriesOnlyFileFilter transientFilter;

/**
**
*/
public EmptyFolders() // --------------------------------------------------
{
 this.listOfEmptyFolder = new LinkedList<File>();
 this.listOfRootFolder  = new LinkedList<File>();
}

/**
**
*/
final
protected DirectoriesOnlyFileFilter getDirectoriesOnlyFileFilter() // -----
{
 if( this.transientFilter == null ) {
    this.transientFilter = new DirectoriesOnlyFileFilter();
    }

return this.transientFilter;
}

/**
**
*/
public EmptyFolders addFolder( final File folderFile ) // -----------------
{
 this.listOfRootFolder.add( folderFile );

 final FileIterator iter = new FileIterator( folderFile, getDirectoriesOnlyFileFilter() );

 while( iter.hasNext() ) {
    File    folder  = iter.next();
    File[]  list    = folder.listFiles();

    if( list != null && list.length == 0 ) {
        this.listOfEmptyFolder.add( folder );
        }
    }

 return this;
}

/**
**
*/
public Iterator<File> iterator() // ---------------------------------------
{
 // return this.listOfEmptyFolder.iterator();
 return Collections.unmodifiableList( this.listOfEmptyFolder ).iterator();
}

/**
**
*/
public int size() // ------------------------------------------------------
{
 return this.listOfEmptyFolder.size();
}

/**
**
*/
public List<File> getRootFolders() // -------------------------------------
{
 return Collections.unmodifiableList( this.listOfRootFolder );
}

} // class
